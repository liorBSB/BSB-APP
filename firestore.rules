rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin(uid) { return get(/databases/$(database)/documents/users/$(uid)).data.userType == 'admin'; }
    function isOwner(uid) { return request.auth != null && request.auth.uid == uid; }

    // Users read their own profile; admins can read all
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin(request.auth.uid));
      allow write: if isSignedIn() && (isOwner(userId) || isAdmin(request.auth.uid));
    }

    // Expenses (admin managed records)
    match /expenses/{expenseId} {
      allow create: if isSignedIn() && isAdmin(request.auth.uid);
      allow read: if isSignedIn(); // UI will scope by role; audits can be added later
      allow update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Events shown on home; admins manage
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Surveys shown on home; admins manage
    match /surveys/{surveyId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Messages shown on home; admins manage
    match /messages/{messageId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Refund requests (created by soldiers; reviewed by admins)
    match /refundRequests/{requestId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && (
        resource.data.ownerUid == request.auth.uid ||
        isAdmin(request.auth.uid)
      );
      // Owners can update until status is terminal; admins can always update
      allow update: if isSignedIn() && (
        isAdmin(request.auth.uid) ||
        (resource.data.ownerUid == request.auth.uid && resource.data.status in ['waiting'])
      );
      // Soft delete flag only; restrict hard delete to admins
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Problem reports (created by soldiers; reviewed by admins)
    match /problemReports/{reportId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && (
        resource.data.ownerUid == request.auth.uid ||
        isAdmin(request.auth.uid)
      );
      // Owners can update until status is terminal; admins can always update
      allow update: if isSignedIn() && (
        isAdmin(request.auth.uid) ||
        (resource.data.ownerUid == request.auth.uid && resource.data.status in ['pending'])
      );
      // Soft delete flag only; restrict hard delete to admins
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }



    // Admin approval requests for admin access
    match /approvalRequests/{reqId} {
      // any signed-in user can create a request to become admin
      allow create: if isSignedIn();
      // only admins can read and manage requests
      allow read: if isSignedIn() && isAdmin(request.auth.uid);
      allow update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Soldiers collection (current daily data)
    match /soldiers/{soldierId} {
      // Soldiers can read and update their own data
      allow read, write: if isSignedIn() && isOwner(soldierId);
      // Admins can read and manage all soldier data
      allow read, write: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Soldier profiles collection (long-term questionnaire data)
    match /soldierProfiles/{profileId} {
      // Soldiers can read and update their own profile
      allow read, write: if isSignedIn() && isOwner(profileId);
      // Admins can read and manage all profiles
      allow read, write: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Archived soldiers collection (for export purposes)
    match /archivedSoldiers/{archivedId} {
      // Only admins can access archived data
      allow read, write: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Archived users collection (for export purposes)
    match /archivedUsers/{archivedId} {
      // Only admins can access archived data
      allow read, write: if isSignedIn() && isAdmin(request.auth.uid);
    }
  }
}