rules_version = '2';

// Craft rules based on data in your Firestore database
service firebase.storage {
  match /b/{bucket}/o {
    function isSignedIn() { return request.auth != null; }
    function isAdmin(uid) { return firestore.get(/databases/(default)/documents/users/$(uid)).data.userType == 'admin'; }

    // Report images uploaded by users
    // Path: reports/{ownerUid}/{fileId}
    match /reports/{ownerUid}/{fileId} {
      allow read: if isSignedIn() && (request.auth.uid == ownerUid || isAdmin(request.auth.uid));
      // Only the owner can write to their own report folder; restrict to images up to 10MB
      allow write: if isSignedIn()
                  && request.auth.uid == ownerUid
                  && request.resource.size < 10 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
      allow delete: if isSignedIn() && (request.auth.uid == ownerUid || isAdmin(request.auth.uid));
    }

    // Expenses photos uploaded by admins
    // Path: expenses/{userId}/{fileName}
    match /expenses/{userId}/{fileName} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isAdmin(request.auth.uid)
                  && request.resource.size < 10 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Receipts path: receipts/{ownerUid}/{fileId}
    match /receipts/{ownerUid}/{fileId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isAdmin(request.auth.uid)
                  && request.resource.size < 10 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // Refunds path: refunds/{ownerUid}/{userId}/{fileName} (PhotoUpload adds userId)
    match /refunds/{ownerUid}/{userId}/{fileName} {
      allow read: if isSignedIn() && (request.auth.uid == ownerUid || isAdmin(request.auth.uid));
      allow write: if isSignedIn() && (request.auth.uid == ownerUid || isAdmin(request.auth.uid))
                  && request.resource.size < 10 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
      allow delete: if isSignedIn() && (request.auth.uid == ownerUid || isAdmin(request.auth.uid));
    }

    // Soldier profile photos uploaded by admins
    // Path: soldier-profiles/{soldierId}/{fileName}
    match /soldier-profiles/{soldierId}/{fileName} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isAdmin(request.auth.uid)
                  && request.resource.size < 10 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    // User profile photos uploaded by users
    // Path: user-profiles/{userId}/{userId}/{fileName} (PhotoUpload adds extra userId)
    match /user-profiles/{userId}/{uploaderId}/{fileName} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId
                  && request.resource.size < 10 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }
  }
}
